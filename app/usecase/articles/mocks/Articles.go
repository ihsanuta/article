// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "article/app/models"

	mock "github.com/stretchr/testify/mock"
)

// Articles is an autogenerated mock type for the Articles type
type Articles struct {
	mock.Mock
}

// CreateArticles provides a mock function with given fields: form
func (_m *Articles) CreateArticles(form models.Article) (models.Article, error) {
	ret := _m.Called(form)

	var r0 models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Article) (models.Article, error)); ok {
		return rf(form)
	}
	if rf, ok := ret.Get(0).(func(models.Article) models.Article); ok {
		r0 = rf(form)
	} else {
		r0 = ret.Get(0).(models.Article)
	}

	if rf, ok := ret.Get(1).(func(models.Article) error); ok {
		r1 = rf(form)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticles provides a mock function with given fields: param
func (_m *Articles) GetArticles(param models.ArticleParam) ([]models.Article, error) {
	ret := _m.Called(param)

	var r0 []models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ArticleParam) ([]models.Article, error)); ok {
		return rf(param)
	}
	if rf, ok := ret.Get(0).(func(models.ArticleParam) []models.Article); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(models.ArticleParam) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewArticles interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticles creates a new instance of Articles. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticles(t mockConstructorTestingTNewArticles) *Articles {
	mock := &Articles{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
